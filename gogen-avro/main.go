package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"

	"github.com/clear-street/gogen-avro/generator"
	"github.com/clear-street/gogen-avro/imprt"
	"github.com/clear-street/gogen-avro/types"
)

const (
	comment = "// Code generated by github.com/clear-street/gogen-avro. DO NOT EDIT."
)

func main() {
	packageName := flag.String("package", "avro", "Root package")
	containers := flag.Bool("containers", false, "Whether to generate container writer methods")
	shortUnions := flag.Bool("short-unions", false, "Whether to use shorter names for Union types")

	flag.Parse()
	if flag.NArg() < 2 {
		fmt.Fprintf(os.Stderr, "Usage: gogen-avro [--short-unions] [--package=<root package>] [--containers] <target directory> <schema files>\n")
		os.Exit(1)
	}

	targetDir := flag.Arg(0)
	files := flag.Args()[1:]
	namespace := types.NewNamespace(*shortUnions)

	for _, fileName := range files {
		schema, err := ioutil.ReadFile(fileName)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error reading file %q - %v\n", fileName, err)
			os.Exit(2)
		}

		_, err = namespace.TypeForSchema(schema)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error decoding schema for file %q - %v\n", fileName, err)
			os.Exit(3)
		}
	}

	for _, v := range namespace.Schemas {
		if err := v.Root.ResolveReferences(namespace); err != nil {
			panic(err)
		}
	}

	pkgs := map[string]*generator.Package{}
	for k, v := range namespace.Definitions {
		pkg, ok := pkgs[k.Namespace]
		if !ok {
			pkg = generator.NewPackage(*packageName, k.Namespace)
			pkgs[k.Namespace] = pkg
		}

		v.AddStruct(pkg, *containers)
		v.AddSerializer(pkg)
		v.AddDeserializer(pkg)
	}

	commented := map[string]bool{}
	for k, v := range pkgs {
		path := filepath.Join(targetDir, imprt.Pkg(*packageName, k))
		if imprt.IsRootPkg(*packageName, k) {
			path = targetDir
		}

		if err := os.MkdirAll(path, os.ModePerm); err != nil {
			panic(err)
		}

		for _, f := range v.Files() {
			n := v.Name() + f
			if _, ok := commented[n]; ok {
				continue
			}
			v.AddHeader(f, comment)
			commented[n] = true
		}

		err := v.WriteFiles(path)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error writing source files to directory %q - %v\n", path, err)
			os.Exit(4)
		}
	}
}
